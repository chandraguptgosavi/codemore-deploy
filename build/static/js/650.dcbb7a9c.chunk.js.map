{"version":3,"file":"static/js/650.dcbb7a9c.chunk.js","mappings":"yVAoBMA,GAAsBC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,uGAQzB,SAASE,EAAIC,GACX,IAIGC,EAJKC,EAAuBF,EAAvBE,MAAOC,EAAgBH,EAAhBG,MAAOC,EAASJ,EAATI,KAChBC,GAAWC,EAAAA,EAAAA,MAOjB,OACE,SAACC,EAAA,GAAD,CACEJ,MAAOA,EAEPK,UAAU,MACVC,gBAAc,EACdC,GAAI,CAAEC,QAAST,EAAQ,IAAM,EAAIU,EAAAA,EAAAA,WAAcC,GALjD,UAOE,UAACC,EAAA,EAAD,CAAgBC,SAZjBd,EAY8CG,EAAKF,GAAOc,UAZ1C,SAACC,GAChBZ,EAAS,GAAD,OAAIa,EAAAA,EAAAA,MAAJ,YAAmBjB,MAW3B,WACE,SAACkB,EAAA,EAAD,CACEC,QAAShB,EAAKF,GAAOmB,aACrBC,UAAWlB,EAAKF,GAAOqB,OAAOC,YAC9BC,uBAAwB,CACtBC,SAAUC,EAAAA,EAAAA,IAAAA,IAEZC,yBAA0B,CACxBC,MAAiC,IAA1BzB,EAAKF,GAAOqB,OAAOO,GAAW,eAAiB,aACtDJ,SAAUC,EAAAA,EAAAA,IAAAA,OAGd,SAACR,EAAA,EAAD,CACEG,UAAWlB,EAAKF,GAAO6B,aACvBrB,GAAI,CACFsB,KAAM,OACNC,EAAGN,EAAAA,EAAAA,IAAAA,GACHO,OAAQ,kBACRC,aAAcR,EAAAA,EAAAA,IAAAA,IAEhBC,yBAA0B,CACxBC,MAAO,mBA5Bf,UAEUzB,EAAKF,GAAOc,UAFtB,YAEmCd,IAqFvC,MAnDA,WACE,OAAmDkC,EAAAA,EAAAA,IACjD,SAACC,GAAD,OAAWA,EAAMC,eADXC,EAAR,EAAQA,mBAAoBC,EAA5B,EAA4BA,MAAOF,EAAnC,EAAmCA,YAI3BG,GAAaC,EAAAA,EAAAA,MAAbD,SACFE,GAAWC,EAAAA,EAAAA,KAMjB,OAJAC,EAAAA,EAAAA,YAAU,WACJJ,GAAUE,GAASG,EAAAA,EAAAA,IAAeL,MACrC,KAGD,UAAC,EAAAM,SAAD,WACGR,GACC,SAACS,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,SAA/B,yBAIA,SAAC,EAAAH,SAAD,UACGT,EAAYa,OAAS,GACpB,SAAC,IAAD,UACG,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,MAAX,OACC,SAACzD,EAAD,CACEwD,OAAQA,EACRC,MAAOA,EACPC,SAAU,GACVC,UAAWjB,EAAYa,OACvBK,cAAe,EACfC,SAAUnB,EANZ,SAQGvC,QAKP,SAACiD,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,SAA/B,yCAMN,SAACQ,EAAA,EAAD,CACEC,KAAgB,OAAVnB,EACNoB,QAASpB,EACTqB,QAAS,kBAAMlB,GAASmB,EAAAA,EAAAA,cCxGhC,MAZA,WACI,OACE,SAAC,IAAD,CACET,MAAM,MACNU,QAAQ,MACRC,SAAS,QAHX,UAKE,SAAC,EAAD","sources":["features/submissions/SubmissionsList.tsx","pages/Submissions.tsx"],"sourcesContent":["import { Fragment, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport {\n  ListItem,\n  ListItemButton,\n  ListItemText,\n  Typography,\n} from \"@mui/material\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport { FixedSizeList, ListChildComponentProps } from \"react-window\";\nimport { useNavigate, useParams } from \"react-router-dom\";\n\nimport Color from \"constants/colors\";\nimport useReduxSelector from \"hooks/useReduxSelector\";\nimport ToastMessage from \"components/ToastMessage\";\nimport useReduxDispatch from \"hooks/useReduxDispatch\";\nimport { getSubmissions, resetSubmissionsState } from \"./submissionsSlice\";\nimport Paths from \"router/paths\";\nimport Unit from \"constants/units\";\n\nconst StyledFixedSizeList = styled(FixedSizeList)`\n  scrollbar-width: none;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`;\n\nfunction Row(props: ListChildComponentProps) {\n  const { index, style, data } = props;\n  const navigate = useNavigate();\n\n  const handleListItemClick =\n    (_id: string) => (_: React.MouseEvent<HTMLDivElement>) => {\n      navigate(`${Paths.SOLVE}/${_id}`);\n    };\n\n  return (\n    <ListItem\n      style={style}\n      key={`${data[index].problemID}-${index}`}\n      component=\"div\"\n      disablePadding\n      sx={{ bgcolor: index % 2 === 1 ? Color.LIGHT : undefined }}\n    >\n      <ListItemButton onClick={handleListItemClick(data[index].problemID)}>\n        <ListItemText\n          primary={data[index].problemTitle}\n          secondary={data[index].status.description}\n          primaryTypographyProps={{\n            fontSize: Unit.rem.LG,\n          }}\n          secondaryTypographyProps={{\n            color: data[index].status.id === 3 ? \"success.dark\" : \"error.dark\",\n            fontSize: Unit.rem.MD,\n          }}\n        />\n        <ListItemText\n          secondary={data[index].languageName}\n          sx={{\n            flex: \"none\",\n            p: Unit.rem.XS,\n            border: \"1px solid black\",\n            borderRadius: Unit.rem.XS,\n          }}\n          secondaryTypographyProps={{\n            color: \"secondary\",\n          }}\n        />\n      </ListItemButton>\n    </ListItem>\n  );\n}\n\nfunction SubmissionsList() {\n  const { submissionsLoading, error, submissions } = useReduxSelector(\n    (state) => state.submissions\n  );\n\n  const { username } = useParams();\n  const dispatch = useReduxDispatch();\n\n  useEffect(() => {\n    if (username) dispatch(getSubmissions(username));\n  }, []);\n\n  return (\n    <Fragment>\n      {submissionsLoading ? (\n        <Typography variant=\"h6\" align=\"center\">\n          Loading...\n        </Typography>\n      ) : (\n        <Fragment>\n          {submissions.length > 0 ? (\n            <AutoSizer>\n              {({ height, width }) => (\n                <StyledFixedSizeList\n                  height={height}\n                  width={width}\n                  itemSize={72}\n                  itemCount={submissions.length}\n                  overscanCount={4}\n                  itemData={submissions}\n                >\n                  {Row}\n                </StyledFixedSizeList>\n              )}\n            </AutoSizer>\n          ) : (\n            <Typography variant=\"h6\" align=\"center\">\n              User has no submissions!\n            </Typography>\n          )}\n        </Fragment>\n      )}\n      <ToastMessage\n        show={error !== null}\n        message={error!!}\n        onClose={() => dispatch(resetSubmissionsState())}\n      />\n    </Fragment>\n  );\n}\n\nexport default SubmissionsList;\n","import StyledPageContainer from \"components/PageContainer.styles\";\nimport SubmissionsList from \"features/submissions/SubmissionsList\";\n\nfunction Submissions() {\n    return (\n      <StyledPageContainer\n        width=\"90%\"\n        smWidth=\"75%\"\n        maxWidth=\"700px\"\n      >\n        <SubmissionsList/>\n      </StyledPageContainer>\n    );\n}\n\nexport default Submissions;"],"names":["StyledFixedSizeList","styled","FixedSizeList","Row","props","_id","index","style","data","navigate","useNavigate","ListItem","component","disablePadding","sx","bgcolor","Color","undefined","ListItemButton","onClick","problemID","_","Paths","ListItemText","primary","problemTitle","secondary","status","description","primaryTypographyProps","fontSize","Unit","secondaryTypographyProps","color","id","languageName","flex","p","border","borderRadius","useReduxSelector","state","submissions","submissionsLoading","error","username","useParams","dispatch","useReduxDispatch","useEffect","getSubmissions","Fragment","Typography","variant","align","length","height","width","itemSize","itemCount","overscanCount","itemData","ToastMessage","show","message","onClose","resetSubmissionsState","smWidth","maxWidth"],"sourceRoot":""}