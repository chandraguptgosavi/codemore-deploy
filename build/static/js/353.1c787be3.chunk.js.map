{"version":3,"file":"static/js/353.1c787be3.chunk.js","mappings":"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","sources":["constants/strings.ts","features/contribution/ContributionForm.tsx","pages/Contribute.tsx"],"sourcesContent":["const CodemoreString = {\n  problemTitlePlaceholer: \"Target element position in given array\",\n  problemStatementPlaholder:\n    \"Given an array of length N and target T. Print position of target element.\",\n  problemInputPlaceholder:\n    \"First line will contain number of array elements N and target T. Second line contains N array elements.\",\n  problemInputHelper: \"Mention how user can take input\",\n  problemOutputPlaceholder:\n    \"Print single number indicating position of given target element T.\",\n  problemOutputHelper: \"Mention how user can print output\",\n  problemSampleTestcaseCountPlaceholder: \"Example: 2\",\n  problemSampleTestcaseCountHelper:\n    \"Number of test cases you will enter as sample\",\n  problemSampleTestcaseInputPlaceholder: `Example:\\n5 4\\n1 2 3 4 5,\\n3 7\\n7 8 9`,\n  problemSampleTestcaseInputHelper: \"Separate each test case input with comma\",\n  problemSampleTestcaseOutputPlaceholder: `Example:\\n4,\\n1`,\n  problemSampleTestcaseOutputHelper:\n    \"Separate each test case output with comma\",\n  problemTestcaseCountPlaceholder: \"Refer sample tescase count\",\n  problemTestcaseCountHelper:\n    \"Number of test cases you will enter to judge user submission\",\n  problemTestcaseInputPlaceholder: \"Refer sample tescase input\",\n  problemTestcaseInputHelper:\n    \"Test case input, will be used to judge user submission\",\n  problemTestcaseOutputPlaceholder: \"Refer sample tescase output\",\n  problemTestcaseOutputHelperr:\n    \"Test case output, will be used to judge user submission\",\n  fieldRequiredMessage: \"This field is required\",\n  validNumberMessage: \"Please enter valid number\",\n};\n\nexport default CodemoreString;\n","import { Children, Fragment, ReactNode } from \"react\";\nimport { Button, TextField, Typography } from \"@mui/material\";\nimport { Controller, SubmitHandler, useForm } from \"react-hook-form\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\n\nimport StyledForm from \"components/form/Form.styles\";\nimport StyledFormItem from \"components/form/FormItem.styles\";\nimport Unit from \"constants/units\";\nimport useReduxSelector from \"hooks/useReduxSelector\";\nimport useReduxDispatch from \"hooks/useReduxDispatch\";\nimport { createProblem, resetContributionState } from \"./contributionSlice\";\nimport ToastMessage from \"components/ToastMessage\";\nimport CodemoreString from \"constants/strings\";\n\ntype FormInputs = {\n  title: string;\n  statement: string;\n  input: string;\n  output: string;\n  sampleTestcaseCount: number;\n  sampleTestcaseInput: string;\n  sampleTestcaseOutput: string;\n  testcaseCount: number;\n  testcaseInput: string;\n  testcaseOutput: string;\n};\n\nconst yupSchema = yup.object().shape({\n  title: yup.string().required(),\n  statement: yup.string().required(),\n  input: yup.string().required(),\n  output: yup.string().required(),\n  sampleTestcaseCount: yup.number().required().positive().integer(),\n  sampleTestcaseInput: yup.string().required(),\n  sampleTestcaseOutput: yup.string().required(),\n  testcaseCount: yup.number().required().positive().integer(),\n  testcaseInput: yup.string().required(),\n  testcaseOutput: yup.string().required(),\n});\n\nfunction FormItems({ children }: { children: ReactNode }) {\n  return (\n    <Fragment>\n      {Children.map(children, (child, _) => (\n        <StyledFormItem>{child}</StyledFormItem>\n      ))}\n    </Fragment>\n  );\n}\n\nfunction ContributionForm() {\n  const {\n    control,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<FormInputs>({ resolver: yupResolver(yupSchema) });\n  const { isLoading, error, response } = useReduxSelector(\n    (state) => state.contribution\n  );\n  const dispatch = useReduxDispatch();\n\n  const onSubmit: SubmitHandler<FormInputs> = (data) => {\n    dispatch(\n      createProblem({\n        ...data,\n        sampleTestCases: {\n          count: data.sampleTestcaseCount,\n          input: data.sampleTestcaseInput,\n          output: data.sampleTestcaseOutput,\n        },\n        testCases: {\n          count: data.testcaseCount,\n          input: data.testcaseInput,\n          output: data.testcaseOutput,\n        },\n      })\n    );\n  };\n\n  return (\n    <Fragment>\n      <StyledForm>\n        <FormItems>\n          <Typography variant=\"h6\" align=\"center\">\n            Contribute to our problem set!\n          </Typography>\n          <Controller\n            name=\"title\"\n            control={control}\n            render={({ field }) => (\n              <TextField\n                variant=\"filled\"\n                label=\"Problem title\"\n                placeholder={CodemoreString.problemTitlePlaceholer}\n                error={!!errors.title}\n                helperText={\n                  !!errors.title && CodemoreString.fieldRequiredMessage\n                }\n                fullWidth\n                {...field}\n              />\n            )}\n          />\n          <Controller\n            name=\"statement\"\n            control={control}\n            render={({ field }) => (\n              <TextField\n                variant=\"filled\"\n                label=\"Problem statement\"\n                placeholder={CodemoreString.problemStatementPlaholder}\n                error={!!errors.statement}\n                helperText={\n                  !!errors.statement && CodemoreString.fieldRequiredMessage\n                }\n                multiline\n                fullWidth\n                {...field}\n              />\n            )}\n          />\n          <Controller\n            name=\"input\"\n            control={control}\n            render={({ field }) => (\n              <TextField\n                variant=\"filled\"\n                label=\"Input\"\n                placeholder={CodemoreString.problemInputPlaceholder}\n                error={!!errors.input}\n                helperText={\n                  errors.input\n                    ? CodemoreString.fieldRequiredMessage\n                    : CodemoreString.problemInputHelper\n                }\n                multiline\n                fullWidth\n                {...field}\n              />\n            )}\n          />\n          <Controller\n            name=\"output\"\n            control={control}\n            render={({ field }) => (\n              <TextField\n                variant=\"filled\"\n                label=\"Output\"\n                placeholder={CodemoreString.problemOutputPlaceholder}\n                error={!!errors.output}\n                helperText={\n                  errors.output\n                    ? CodemoreString.fieldRequiredMessage\n                    : CodemoreString.problemOutputHelper\n                }\n                multiline\n                fullWidth\n                {...field}\n              />\n            )}\n          />\n          <Controller\n            name=\"sampleTestcaseCount\"\n            control={control}\n            render={({ field }) => (\n              <TextField\n                variant=\"filled\"\n                label=\"Sample testcase count\"\n                placeholder={\n                  CodemoreString.problemSampleTestcaseCountPlaceholder\n                }\n                error={!!errors.sampleTestcaseCount}\n                helperText={\n                  errors.sampleTestcaseCount\n                    ? CodemoreString.validNumberMessage\n                    : CodemoreString.problemSampleTestcaseCountHelper\n                }\n                fullWidth\n                {...field}\n              />\n            )}\n          />\n          <Controller\n            name=\"sampleTestcaseInput\"\n            control={control}\n            render={({ field }) => (\n              <TextField\n                variant=\"filled\"\n                label=\"Sample testcase input\"\n                placeholder={\n                  CodemoreString.problemSampleTestcaseInputPlaceholder\n                }\n                helperText={\n                  errors.sampleTestcaseInput\n                    ? CodemoreString.fieldRequiredMessage\n                    : CodemoreString.problemSampleTestcaseInputHelper\n                }\n                error={!!errors.sampleTestcaseInput}\n                multiline\n                fullWidth\n                {...field}\n              />\n            )}\n          />\n          <Controller\n            name=\"sampleTestcaseOutput\"\n            control={control}\n            render={({ field }) => (\n              <TextField\n                variant=\"filled\"\n                label=\"Sample testcase output\"\n                placeholder={\n                  CodemoreString.problemSampleTestcaseOutputPlaceholder\n                }\n                error={!!errors.sampleTestcaseOutput}\n                helperText={\n                  errors.sampleTestcaseOutput\n                    ? CodemoreString.fieldRequiredMessage\n                    : CodemoreString.problemSampleTestcaseOutputHelper\n                }\n                multiline\n                fullWidth\n                {...field}\n              />\n            )}\n          />\n          <Controller\n            name=\"testcaseCount\"\n            control={control}\n            render={({ field }) => (\n              <TextField\n                variant=\"filled\"\n                label=\"Main testcase count\"\n                placeholder={CodemoreString.problemTestcaseCountPlaceholder}\n                error={!!errors.testcaseCount}\n                helperText={\n                  errors.testcaseCount\n                    ? CodemoreString.validNumberMessage\n                    : CodemoreString.problemTestcaseCountHelper\n                }\n                multiline\n                fullWidth\n                {...field}\n              />\n            )}\n          />\n          <Controller\n            name=\"testcaseInput\"\n            control={control}\n            render={({ field }) => (\n              <TextField\n                variant=\"filled\"\n                label=\"Main testcase input\"\n                placeholder={CodemoreString.problemTestcaseInputPlaceholder}\n                error={!!errors.testcaseInput}\n                helperText={\n                  errors.testcaseInput\n                    ? CodemoreString.fieldRequiredMessage\n                    : CodemoreString.problemTestcaseInputHelper\n                }\n                multiline\n                fullWidth\n                {...field}\n              />\n            )}\n          />\n          <Controller\n            name=\"testcaseOutput\"\n            control={control}\n            render={({ field }) => (\n              <TextField\n                variant=\"filled\"\n                label=\"Main testcase output\"\n                placeholder={CodemoreString.problemTestcaseOutputPlaceholder}\n                error={!!errors.testcaseOutput}\n                helperText={\n                  errors.testcaseOutput\n                    ? CodemoreString.fieldRequiredMessage\n                    : CodemoreString.problemTestcaseOutputHelperr\n                }\n                multiline\n                fullWidth\n                {...field}\n              />\n            )}\n          />\n          <Button\n            variant=\"contained\"\n            fullWidth\n            type=\"submit\"\n            disabled={isLoading}\n            sx={{ marginBottom: Unit.rem.SM }}\n            onClick={handleSubmit(onSubmit)}\n          >\n            {isLoading ? \"Submitting...\" : \"Submit Problem\"}\n          </Button>\n        </FormItems>\n      </StyledForm>\n      <ToastMessage\n        show={error !== null || response !== null}\n        severity={error ? \"error\" : \"success\"}\n        message={error ? error : response!!}\n        onClose={() => dispatch(resetContributionState())}\n      />\n    </Fragment>\n  );\n}\n\nexport default ContributionForm;\n","import StyledPageContainer from \"components/PageContainer.styles\";\nimport ContributionForm from \"features/contribution/ContributionForm\";\n\nfunction Contribute() {\n  return (\n    <StyledPageContainer width=\"90%\" maxWidth=\"600px\">\n      <ContributionForm />\n    </StyledPageContainer>\n  );\n}\n\nexport default Contribute;\n"],"names":["problemTitlePlaceholer","problemStatementPlaholder","problemInputPlaceholder","problemInputHelper","problemOutputPlaceholder","problemOutputHelper","problemSampleTestcaseCountPlaceholder","problemSampleTestcaseCountHelper","problemSampleTestcaseInputPlaceholder","problemSampleTestcaseInputHelper","problemSampleTestcaseOutputPlaceholder","problemSampleTestcaseOutputHelper","problemTestcaseCountPlaceholder","problemTestcaseCountHelper","problemTestcaseInputPlaceholder","problemTestcaseInputHelper","problemTestcaseOutputPlaceholder","problemTestcaseOutputHelperr","fieldRequiredMessage","validNumberMessage","yupSchema","yup","shape","title","required","statement","input","output","sampleTestcaseCount","positive","integer","sampleTestcaseInput","sampleTestcaseOutput","testcaseCount","testcaseInput","testcaseOutput","FormItems","children","Fragment","Children","child","_","useForm","resolver","yupResolver","control","handleSubmit","errors","formState","useReduxSelector","state","contribution","isLoading","error","response","dispatch","useReduxDispatch","Typography","variant","align","name","render","field","TextField","label","placeholder","CodemoreString","helperText","fullWidth","multiline","Button","type","disabled","sx","marginBottom","Unit","onClick","data","createProblem","sampleTestCases","count","testCases","ToastMessage","show","severity","message","onClose","resetContributionState","width","maxWidth"],"sourceRoot":""}