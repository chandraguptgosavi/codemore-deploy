{"version":3,"file":"static/js/603.78ac08c8.chunk.js","mappings":"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","sources":["features/solve-problem/EditorControls.tsx","features/solve-problem/utils.ts","features/solve-problem/Console.tsx","features/solve-problem/CodeEditor.tsx","features/solve-problem/Problem.tsx","pages/SolveProblem.tsx"],"sourcesContent":["import { useParams } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport {\n  Button,\n  FormControlLabel,\n  MenuItem,\n  Switch,\n  TextField,\n} from \"@mui/material\";\n\nimport ToastMessage from \"components/ToastMessage\";\nimport Color from \"constants/colors\";\nimport Unit from \"constants/units\";\nimport useReduxDispatch from \"hooks/useReduxDispatch\";\nimport useReduxSelector from \"hooks/useReduxSelector\";\nimport {\n  resetRunCode,\n  resetSubmission,\n  runCode,\n  setLanguage,\n  submitProblem,\n  toggleConsole,\n} from \"./solveProblemSlice\";\n\nconst StyledEditorControlsContainer = styled.div`\n  width: 100%;\n  height: 10%;\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  align-items: center;\n  box-sizing: border-box;\n`;\n\nfunction EditorControls() {\n  const languages: { name: string; id: number }[] = [\n    { name: \"CPP\", id: 54 },\n    { name: \"Java\", id: 62 },\n    { name: \"JavaScript\", id: 63 },\n    { name: \"Python\", id: 71 },\n  ];\n  const {\n    problem,\n    language,\n    isSubmissionPending,\n    openConsole,\n    submissionError,\n    isCodeRunning,\n    runCodeError,\n  } = useReduxSelector((state) => state.solveProblem);\n  const { _id } = useParams();\n  const dispatch = useReduxDispatch();\n\n  const handleLanguageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedIndex = +event.target.value;\n    dispatch(\n      setLanguage({ name: languages[selectedIndex].name, selectedIndex })\n    );\n  };\n\n  const handleSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(toggleConsole(event.target.checked));\n  };\n\n  const handleToastMessageClose = () => {\n    if (runCodeError) dispatch(resetRunCode());\n    if (submissionError) dispatch(resetSubmission());\n  };\n\n  const handleRun = (_: React.MouseEvent<HTMLButtonElement>) => {\n    if (problem !== null) {\n      dispatch(runCode(languages[language.selectedIndex].id));\n    }\n  };\n\n  const handleSubmit = (_: React.MouseEvent<HTMLButtonElement>) => {\n    if (_id !== undefined && problem !== null) {\n      dispatch(\n        submitProblem({\n          _id,\n          language: languages[language.selectedIndex],\n        })\n      );\n    }\n  };\n\n  return (\n    <StyledEditorControlsContainer>\n      <span>\n        <TextField\n          select\n          size=\"small\"\n          color=\"secondary\"\n          value={language.selectedIndex}\n          onChange={handleLanguageChange}\n        >\n          {languages.map((lang, index) => (\n            <MenuItem key={lang.id} value={index}>\n              {lang.name}\n            </MenuItem>\n          ))}\n        </TextField>\n        <FormControlLabel\n          sx={{ marginLeft: Unit.rem.SM, color: Color.SECONDARY }}\n          control={\n            <Switch\n              color=\"secondary\"\n              checked={openConsole}\n              onChange={handleSwitchChange}\n            />\n          }\n          label=\"Console\"\n        />\n      </span>\n      <span>\n        <Button\n          variant=\"outlined\"\n          color=\"secondary\"\n          disabled={isCodeRunning || isSubmissionPending}\n          onClick={handleRun}\n          sx={{ marginRight: Unit.rem.SM }}\n        >\n          Run\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          disabled={isSubmissionPending || isCodeRunning}\n          onClick={handleSubmit}\n        >\n          Submit\n        </Button>\n      </span>\n      <ToastMessage\n        show={runCodeError !== null || submissionError !== null}\n        message={runCodeError !== null ? runCodeError : submissionError!!}\n        onClose={handleToastMessageClose}\n      />\n    </StyledEditorControlsContainer>\n  );\n}\n\nexport default EditorControls;\n","import { JudgeResponse } from \"./types\";\n\nexport const judgeOuptut = (\n  judgeResponse: JudgeResponse | null,\n  isSubmission: boolean | undefined = false\n) => {\n  if (judgeResponse !== null) {\n    if (!isSubmission && judgeResponse.stdout) return judgeResponse.stdout;\n    if (judgeResponse.compile_output) return judgeResponse.compile_output;\n    if (judgeResponse.message) return judgeResponse.message;\n    if (judgeResponse.stderr) return judgeResponse.stderr;\n  }\n  return \"\";\n};\n","import React, { Fragment, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { Box, Skeleton, Tab, Tabs, TextField, Typography } from \"@mui/material\";\n\nimport Color from \"constants/colors\";\nimport Unit from \"constants/units\";\nimport useReduxDispatch from \"hooks/useReduxDispatch\";\nimport useReduxSelector from \"hooks/useReduxSelector\";\nimport {\n  resetSolveProblem,\n  setConsoleTabIndex,\n  setUserInput,\n} from \"./solveProblemSlice\";\nimport { judgeOuptut } from \"./utils\";\n\ntype StyledConsoleProps = {\n  open: boolean;\n};\n\nconst StyledConsole = styled.div<StyledConsoleProps>`\n  width: 100%;\n  max-height: 0;\n  height: 200px;\n  transition: max-height 0.2s ease-in-out;\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 10%;\n  z-index: 10;\n  overflow: hidden;\n  box-sizing: border-box;\n  background-color: ${Color.SECONDARY};\n\n  ${({ open }) => open && `max-height: 200px;`}\n`;\n\nconst StyledConsoleContainer = styled.div`\n  overflow: hidden;\n  margin: ${Unit.rem.XS};\n  border: 1px solid black;\n  height: 190px;\n  border-radius: ${Unit.rem.XS};\n  background-color: ${Color.LIGHT};\n`;\n\nconst StyledTabPanel = styled.div`\n  height: 142px;\n  position: relative;\n  overflow: auto;\n  scrollbar-width: none; /* Firefox */\n\n  &::-webkit-scrollbar {\n    display: none; /* Safari and Chrome */\n  }\n`;\n\ntype TabPanelProps = {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n};\n\nconst a11yProps = (index: number) => {\n  return {\n    id: `tab-${index}`,\n    \"aria-controls\": `tabpanel-${index}`,\n  };\n};\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <StyledTabPanel\n      hidden={value !== index}\n      id={`tabpanel-${index}`}\n      aria-labelledby={`tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ p: 1 }}>{children}</Box>}\n    </StyledTabPanel>\n  );\n}\n\nfunction Console() {\n  const {\n    problem,\n    openConsole,\n    consoleTabIndex,\n    isSubmissionPending,\n    submissionResponse,\n    isCodeRunning,\n    runCodeResponse,\n    userInput,\n  } = useReduxSelector((state) => state.solveProblem);\n  const dispatch = useReduxDispatch();\n\n  const handleTabsChange = (_: React.SyntheticEvent, newValue: number) => {\n    dispatch(setConsoleTabIndex(newValue));\n  };\n\n  const handleUserInputChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    dispatch(setUserInput(event.target.value));\n  };\n\n  useEffect(() => {\n    if (problem !== null)\n      dispatch(\n        setUserInput(\n          `${problem.sampleTestCases.count}\\r\\n${problem.sampleTestCases.input}`\n        )\n      );\n    dispatch(resetSolveProblem())\n  }, [problem]);\n\n  return (\n    <StyledConsole open={openConsole}>\n      <StyledConsoleContainer>\n        <Box sx={{ borderBottom: 1, borderColor: \"divider\" }}>\n          <Tabs\n            value={consoleTabIndex}\n            textColor=\"secondary\"\n            indicatorColor=\"secondary\"\n            onChange={handleTabsChange}\n            aria-label=\"basic tabs example\"\n          >\n            <Tab label=\"Output\" {...a11yProps(0)} />\n            <Tab label=\"TestCases\" {...a11yProps(1)} />\n          </Tabs>\n        </Box>\n        <TabPanel value={consoleTabIndex} index={0}>\n          {isSubmissionPending || isCodeRunning ? (\n            <Skeleton\n              variant=\"rectangular\"\n              animation=\"wave\"\n              width=\"96%\"\n              height=\"80%\"\n              sx={{\n                position: \"absolute\",\n                top: \"50%\",\n                left: \"50%\",\n                transform: \"translate(-50%,-50%)\",\n              }}\n            />\n          ) : (\n            <div>\n              {submissionResponse !== null || runCodeResponse !== null ? (\n                <Fragment>\n                  {submissionResponse ? (\n                    <Fragment>\n                      <TextField\n                        value={`${\n                          submissionResponse?.status.description\n                        } :\\n${judgeOuptut(submissionResponse, true)}`}\n                        multiline\n                        fullWidth\n                        minRows={4}\n                        maxRows={4}\n                        disabled\n                      />\n                    </Fragment>\n                  ) : (\n                    <Fragment>\n                      <Typography>{}</Typography>\n                      <TextField\n                        value={`${\n                          runCodeResponse && runCodeResponse!!.status.id > 4\n                            ? `${runCodeResponse?.status.description} :\\n`\n                            : \"\"\n                        }${judgeOuptut(runCodeResponse)}`}\n                        multiline\n                        fullWidth\n                        minRows={4}\n                        maxRows={4}\n                        disabled\n                      />\n                    </Fragment>\n                  )}\n                </Fragment>\n              ) : (\n                <Typography align=\"center\" variant=\"h6\">\n                  Submit to see results!\n                </Typography>\n              )}\n            </div>\n          )}\n        </TabPanel>\n        <TabPanel value={consoleTabIndex} index={1}>\n          <TextField\n            value={userInput ? userInput : \"\"}\n            multiline\n            fullWidth\n            minRows={4}\n            maxRows={4}\n            onChange={handleUserInputChange}\n          />\n        </TabPanel>\n      </StyledConsoleContainer>\n    </StyledConsole>\n  );\n}\n\nexport default Console;\n","import styled from \"styled-components\";\nimport MonacoEditor from \"@monaco-editor/react\";\n\nimport Color from \"constants/colors\";\nimport Screen from \"constants/screens\";\nimport Unit from \"constants/units\";\nimport useReduxDispatch from \"hooks/useReduxDispatch\";\nimport useReduxSelector from \"hooks/useReduxSelector\";\nimport {\n  selectLanguage,\n  setSrcCode,\n} from \"./solveProblemSlice\";\nimport EditorControls from \"./EditorControls\";\nimport Console from \"./Console\";\n\nconst StyledCodeEditorContainer = styled.div`\n  width: 100%;\n  min-height: 100vh;\n  padding: ${Unit.rem.MD};\n  position: relative;\n  overflow: visible;\n  box-sizing: border-box;\n  background-color: ${Color.LIGHT};\n\n  @media (min-width: ${Screen.MD}) {\n    width: 65%;\n    height: 100%;\n    min-height: auto;\n  }\n`;\n\nfunction CodeEditor() {\n  const language = useReduxSelector(selectLanguage);\n  const dispatch = useReduxDispatch();\n\n  const handleEditorChange = (value: string | undefined, _: unknown) => {\n    if (value) dispatch(setSrcCode(value));\n  };\n\n  return (\n    <StyledCodeEditorContainer>\n      <MonacoEditor\n        height=\"92%\"\n        width=\"100%\"\n        language={language.name.toLowerCase()}\n        defaultValue=\"// write your code\"\n        onChange={handleEditorChange}\n      />\n      <Console />\n      <EditorControls />\n    </StyledCodeEditorContainer>\n  );\n}\n\nexport default CodeEditor;\n","import { Fragment, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { TextField, Typography } from \"@mui/material\";\n\nimport Color from \"constants/colors\";\nimport Screen from \"constants/screens\";\nimport Unit from \"constants/units\";\nimport useReduxDispatch from \"hooks/useReduxDispatch\";\nimport useReduxSelector from \"hooks/useReduxSelector\";\nimport { getProblem, resetProblem } from \"./solveProblemSlice\";\nimport ToastMessage from \"components/ToastMessage\";\n\nconst ProblemContainer = styled.div`\n  width: 100%;\n  overflow: visible;\n  padding: ${Unit.rem.MD};\n  box-sizing: border-box;\n  text-align: justify;\n\n  @media (min-width: ${Screen.MD}) {\n    width: 35%;\n    overflow: auto;\n    scrollbar-width: auto;\n    scrollbar-color: ${Color.PRIMARY_LIGHT};\n    &::-webkit-scrollbar {\n      width: ${Unit.rem.XS};\n    }\n    &::-webkit-scrollbar-thumb {\n      background: ${Color.PRIMARY_LIGHT};\n      border-radius: ${Unit.rem.XS};\n      visibility: hidden;\n    }\n\n    &:hover::-webkit-scrollbar-thumb {\n      visibility: visible;\n    }\n  }\n`;\n\nfunction Problem() {\n  const { _id } = useParams();\n  const { isProblemLoading, problemError, problem } = useReduxSelector(\n    (state) => state.solveProblem\n  );\n  const dispatch = useReduxDispatch();\n\n  useEffect(() => {\n    if (_id) dispatch(getProblem(_id));\n  }, []);\n\n  return (\n    <ProblemContainer>\n      {isProblemLoading ? (\n        <Typography variant=\"h6\" align=\"center\">\n          Loading...\n        </Typography>\n      ) : (\n        <Fragment>\n          {problem && (\n            <Fragment>\n              <Typography variant=\"h5\" color=\"secondary.dark\" gutterBottom>\n                {problem.title}\n              </Typography>\n              <Typography paragraph gutterBottom>\n                {problem.statement}\n              </Typography>\n              <Typography variant=\"h6\">Input:</Typography>\n              <Typography paragraph gutterBottom>\n                {problem.input}\n              </Typography>\n              <Typography variant=\"h6\">Output:</Typography>\n              <Typography paragraph gutterBottom>\n                {problem.output}\n              </Typography>\n              <Typography variant=\"h6\">Sample Input:</Typography>\n              <TextField\n                value={`${problem.sampleTestCases.count}\\r\\n${problem.sampleTestCases.input}`}\n                multiline\n                fullWidth\n                minRows={5}\n                maxRows={8}\n                disabled\n                sx={{ marginBottom: Unit.rem.MD, bgcolor: Color.LIGHT }}\n              />\n              <Typography variant=\"h6\">Sample Output:</Typography>\n              <TextField\n                value={problem.sampleTestCases.output}\n                multiline\n                fullWidth\n                minRows={5}\n                maxRows={8}\n                disabled\n                sx={{ marginBottom: Unit.rem.MD, bgcolor: Color.LIGHT }}\n              />\n            </Fragment>\n          )}\n        </Fragment>\n      )}\n      <ToastMessage\n        show={problemError !== null}\n        onClose={() => dispatch(resetProblem())}\n        message={problemError!!}\n      />\n    </ProblemContainer>\n  );\n}\n\nexport default Problem;\n","import StyledPageContainer from \"components/PageContainer.styles\";\nimport CodeEditor from \"features/solve-problem/CodeEditor\";\nimport Problem from \"features/solve-problem/Problem\";\n\nfunction SolveProblem() {\n  return (\n    <StyledPageContainer width=\"100%\" mdFlexDirection=\"row\">\n      <Problem />\n      <CodeEditor />\n    </StyledPageContainer>\n  );\n}\n\nexport default SolveProblem;\n"],"names":["StyledEditorControlsContainer","styled","languages","name","id","useReduxSelector","state","solveProblem","problem","language","isSubmissionPending","openConsole","submissionError","isCodeRunning","runCodeError","_id","useParams","dispatch","useReduxDispatch","TextField","select","size","color","value","selectedIndex","onChange","event","target","setLanguage","map","lang","index","MenuItem","FormControlLabel","sx","marginLeft","Unit","Color","control","Switch","checked","toggleConsole","label","Button","variant","disabled","onClick","_","runCode","marginRight","undefined","submitProblem","ToastMessage","show","message","onClose","resetRunCode","resetSubmission","judgeOuptut","judgeResponse","isSubmission","stdout","compile_output","stderr","StyledConsole","open","StyledConsoleContainer","StyledTabPanel","a11yProps","TabPanel","props","children","other","hidden","Box","p","consoleTabIndex","submissionResponse","runCodeResponse","userInput","useEffect","setUserInput","sampleTestCases","count","input","resetSolveProblem","borderBottom","borderColor","Tabs","textColor","indicatorColor","newValue","setConsoleTabIndex","Tab","Skeleton","animation","width","height","position","top","left","transform","Fragment","status","description","multiline","fullWidth","minRows","maxRows","Typography","align","StyledCodeEditorContainer","Screen","selectLanguage","toLowerCase","defaultValue","setSrcCode","ProblemContainer","isProblemLoading","problemError","getProblem","gutterBottom","title","paragraph","statement","output","marginBottom","bgcolor","resetProblem","mdFlexDirection"],"sourceRoot":""}